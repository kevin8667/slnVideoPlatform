// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VdbAPI.Models;

#nullable disable

namespace VdbAPI.Migrations
{
    [DbContext(typeof(VideoDBContext))]
    partial class VideoDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VdbAPI.Models.ActorList", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"));

                    b.Property<byte[]>("ActorImage")
                        .HasColumnType("image");

                    b.Property<string>("ActorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActorId")
                        .HasName("PK_演員列表");

                    b.ToTable("ActorList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ArticleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("ArticleContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<bool?>("Lock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("PostDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ReplyCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ThemeId")
                        .HasColumnType("int")
                        .HasColumnName("ThemeID");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ArticleId")
                        .HasName("PK__Article__9C6270C8A7594F7D");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ThemeId");

                    b.HasIndex(new[] { "ArticleId", "ThemeId", "AuthorId", "Title", "PostDate", "Lock" }, "NonClusteredIndex-20240815-155924");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.BlackList", b =>
                {
                    b.Property<int>("BlacklistId")
                        .HasColumnType("int")
                        .HasColumnName("BlacklistID");

                    b.Property<int>("BlockedMemberId")
                        .HasColumnType("int")
                        .HasColumnName("BlockedMemberID");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<string>("Reason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BlacklistId")
                        .HasName("PK__Blacklis__AFDBF438F52A4D71");

                    b.HasIndex("BlockedMemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("BlackList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.CastList", b =>
                {
                    b.Property<int>("CastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CastID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CastId"));

                    b.Property<int?>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("ActorID");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.HasKey("CastId")
                        .HasName("PK_StaringList");

                    b.HasIndex("ActorId");

                    b.HasIndex("VideoId");

                    b.ToTable("CastList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Cinema", b =>
                {
                    b.Property<int>("CinemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CinemaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinemaId"));

                    b.Property<string>("CinemaAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CinemaName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CinemaPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CinemaId");

                    b.ToTable("Cinema", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.CouponInfo", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID")
                        .HasComment("優惠券編號");

                    b.Property<string>("CouponDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("優惠券說明");

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("優惠券名稱");

                    b.Property<DateTime>("CreTime")
                        .HasColumnType("datetime")
                        .HasComment("建立時間");

                    b.Property<string>("DiscountFormula")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("折價公式(ex:折50寫N-50)");

                    b.Property<int?>("ExpireDate")
                        .HasColumnType("int")
                        .HasComment("效期(N天)");

                    b.Property<int?>("GiftListId")
                        .HasColumnType("int")
                        .HasColumnName("GiftListID")
                        .HasComment("增品清單編號");

                    b.Property<string>("Remark")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("備註");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("類型(現金券折價,贈品)");

                    b.HasKey("CouponId");

                    b.ToTable("CouponInfo", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.DirectorForVideoList", b =>
                {
                    b.Property<int>("SerialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SerialID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialId"));

                    b.Property<int>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("DirectorID");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.HasKey("SerialId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("VideoId");

                    b.ToTable("DirectorForVideoList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.DirectorList", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DirectorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorId"));

                    b.Property<byte[]>("DirectorImage")
                        .HasColumnType("image");

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DirectorId")
                        .HasName("PK_導演列表");

                    b.ToTable("DirectorList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.FriendChat", b =>
                {
                    b.Property<int>("FriendChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FriendChatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendChatId"));

                    b.Property<string>("FriendChat1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FriendChat");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiverID");

                    b.Property<DateTime?>("SendTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("SenderID");

                    b.HasKey("FriendChatId")
                        .HasName("PK_FriendChat_1");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendChat", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.FriendList", b =>
                {
                    b.Property<int>("FriendListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FriendListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendListId"));

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FriendId")
                        .HasColumnType("int")
                        .HasColumnName("FriendID");

                    b.Property<string>("FriendStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.HasKey("FriendListId")
                        .HasName("PK__FriendLi__64B949EBFF0464DA");

                    b.HasIndex("FriendId");

                    b.HasIndex("MemberId");

                    b.ToTable("FriendList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.GenreList", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenreId")
                        .HasName("PK_類型總表");

                    b.ToTable("GenreList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.GenresForVideoList", b =>
                {
                    b.Property<int>("SerialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SerialID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialId"));

                    b.Property<int?>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.HasKey("SerialId");

                    b.HasIndex("GenreId");

                    b.HasIndex("VideoId");

                    b.ToTable("GenresForVideoList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.GiftInfo", b =>
                {
                    b.Property<int>("GiftId")
                        .HasColumnType("int")
                        .HasColumnName("GiftID")
                        .HasComment("贈品編號");

                    b.Property<string>("GiftDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("贈品說明");

                    b.Property<string>("GiftName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("贈品名稱");

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("贈品圖片");

                    b.Property<int>("Qty")
                        .HasColumnType("int")
                        .HasComment("贈品數量");

                    b.HasKey("GiftId");

                    b.ToTable("GiftInfo", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.GiftList", b =>
                {
                    b.Property<int>("GiftListId")
                        .HasColumnType("int")
                        .HasColumnName("GiftListID")
                        .HasComment("贈品清單編號");

                    b.Property<int>("GiftId")
                        .HasColumnType("int")
                        .HasColumnName("GiftID")
                        .HasComment("贈品編號");

                    b.HasKey("GiftListId", "GiftId")
                        .HasName("PK_GiftList_1");

                    b.HasIndex("GiftId");

                    b.ToTable("GiftList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Hall", b =>
                {
                    b.Property<int>("HallsId")
                        .HasColumnType("int")
                        .HasColumnName("HallsID");

                    b.Property<int?>("CinemaId")
                        .HasColumnType("int")
                        .HasColumnName("CinemaID");

                    b.Property<string>("HallsName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SeatCapacity")
                        .HasColumnType("int");

                    b.HasKey("HallsId");

                    b.HasIndex("CinemaId");

                    b.ToTable("Hall", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.ImageForVideoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.HasKey("Id")
                        .HasName("PK_ImageForWorkList");

                    b.HasIndex("ImageId");

                    b.HasIndex("VideoId");

                    b.ToTable("ImageForVideoList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.ImageList", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("imagePath");

                    b.HasKey("ImageId")
                        .HasName("PK_圖片列表");

                    b.ToTable("ImageList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Invite", b =>
                {
                    b.Property<int>("InvitelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvitelID")
                        .HasComment("流水號");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvitelId"));

                    b.Property<string>("InviteMsg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("邀請訊息");

                    b.Property<DateTime>("InviteTime")
                        .HasColumnType("datetime")
                        .HasComment("邀請時間");

                    b.Property<int>("InvitedMemberId")
                        .HasColumnType("int")
                        .HasColumnName("InvitedMemberID")
                        .HasComment("受邀好友ID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員ID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("狀態代碼:\r\nInitial初始(I)\r\nAccept接受(A)\r\nReject拒絕(R)\r\nPedding忽略(P)");

                    b.Property<DateTime>("StatusTime")
                        .HasColumnType("datetime")
                        .HasComment("狀態時間");

                    b.HasKey("InvitelId");

                    b.HasIndex("InvitedMemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("Invite", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.KeywordForVideoList", b =>
                {
                    b.Property<int>("SerialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SerialID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialId"));

                    b.Property<int?>("KeywordId")
                        .HasColumnType("int")
                        .HasColumnName("KeywordID");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.HasKey("SerialId")
                        .HasName("PK_KeywordFroVideoList");

                    b.HasIndex("KeywordId");

                    b.HasIndex("VideoId");

                    b.ToTable("KeywordForVideoList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.KeywordList", b =>
                {
                    b.Property<int>("KeywordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeywordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeywordId"));

                    b.Property<string>("Keyword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("KeywordId");

                    b.ToTable("KeywordList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.MemberCoupon", b =>
                {
                    b.Property<int>("SerialNo")
                        .HasColumnType("int")
                        .HasComment("優惠券序號(代碼)");

                    b.Property<int?>("ActionRefNo")
                        .HasColumnType("int")
                        .HasComment("使用的交易單號");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("使用類型(線上電影票/線下電影票)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID")
                        .HasComment("優惠券編號");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("datetime")
                        .HasComment("失效時間");

                    b.Property<DateTime>("GetTime")
                        .HasColumnType("datetime")
                        .HasComment("得到優惠券時間");

                    b.Property<int?>("GiftId")
                        .HasColumnType("int")
                        .HasColumnName("GiftID")
                        .HasComment("兌換的贈品編號");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("狀態(是否兌換,是否失效)");

                    b.Property<DateTime?>("UseTime")
                        .HasColumnType("datetime")
                        .HasComment("使用時間");

                    b.HasKey("SerialNo");

                    b.HasIndex("CouponId");

                    b.HasIndex("GiftId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberCoupon", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.MemberCreatedPlayList", b =>
                {
                    b.Property<int>("MemberCreatedPlayListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberCreatedPlayListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberCreatedPlayListId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("PlayListId")
                        .HasColumnType("int")
                        .HasColumnName("PlayListID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("MemberCreatedPlayListId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PlayListId");

                    b.ToTable("MemberCreatedPlayList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.MemberInfo", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("地址");

                    b.Property<bool?>("Banned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateOnly>("Birth")
                        .HasColumnType("date")
                        .HasComment("生日");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("信箱");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("性別");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("會員等級");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasComment("最後登入時間");

                    b.Property<string>("MemberIdentity")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("會員姓名");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("暱稱");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("密碼");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("手機");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasComment("會員積分");

                    b.Property<DateOnly>("RegisterDate")
                        .HasColumnType("date")
                        .HasComment("註冊時間");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasComment("更新時間(會員到期,降級,升級由系統功能或者後台更改)");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("更新人員或系統功能");

                    b.HasKey("MemberId")
                        .HasName("PK_MemberInformation");

                    b.ToTable("MemberInfo", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.MemberNotice", b =>
                {
                    b.Property<int>("MemberNoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberNoticeID")
                        .HasComment("會員通知編號");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberNoticeId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("建立通知的事件");

                    b.Property<DateTime>("CreTime")
                        .HasColumnType("datetime")
                        .HasComment("通知時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.Property<string>("NoticeContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("通知內容");

                    b.Property<int?>("RefNo")
                        .HasColumnType("int")
                        .HasComment("通知參照的單號");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("狀態:已讀,未讀");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("通知標題");

                    b.HasKey("MemberNoticeId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberNotice", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.MemberPlayList", b =>
                {
                    b.Property<int>("MemberPlayListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberPlayListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberPlayListId"));

                    b.Property<DateTime?>("AddedOtherMemberPlayListAt")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("PlayListId")
                        .HasColumnType("int")
                        .HasColumnName("PlayListID");

                    b.HasKey("MemberPlayListId")
                        .HasName("PK__MemberPl__F763B3FA32E920B0");

                    b.HasIndex("MemberId");

                    b.HasIndex("PlayListId");

                    b.ToTable("MemberPlayList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.NowShowingTheater", b =>
                {
                    b.Property<int>("CombinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CombinationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CombinationId"));

                    b.Property<int?>("CinemaId")
                        .HasColumnType("int")
                        .HasColumnName("CinemaID");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.HasKey("CombinationId");

                    b.HasIndex("CinemaId");

                    b.HasIndex("VideoId");

                    b.ToTable("NowShowingTheater", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeliveryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("OrderTotalPrice")
                        .HasColumnType("money");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("int")
                        .HasColumnName("ShoppingCartID");

                    b.HasKey("OrderId");

                    b.HasIndex("CouponId");

                    b.HasIndex("DriverId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.PlanList", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlanId");

                    b.ToTable("PlanList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.PlayList", b =>
                {
                    b.Property<int>("PlayListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlayListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayListId"));

                    b.Property<int>("AddedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AnalysisTimestamp")
                        .HasColumnType("datetime");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlayListCreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PlayListDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlayListImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayListName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PlayListUpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("SharedCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ShowImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("PlayListId")
                        .HasName("PK__PlayList__38709FBBFCBDB92F");

                    b.ToTable("PlayList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.PlayListCollaborator", b =>
                {
                    b.Property<int>("CollaboratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CollaboratorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollaboratorId"));

                    b.Property<DateTime?>("ActionTimestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("CollaboratorActionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CollaboratorJoinedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("PlayListId")
                        .HasColumnType("int")
                        .HasColumnName("PlayListID");

                    b.HasKey("CollaboratorId")
                        .HasName("PK__PlayList__3AC201C3ED5C66AE");

                    b.HasIndex("MemberId");

                    b.HasIndex("PlayListId");

                    b.ToTable("PlayListCollaborator", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.PlayListItem", b =>
                {
                    b.Property<int>("PlayListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlayListItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayListItemId"));

                    b.Property<int>("PlayListId")
                        .HasColumnType("int")
                        .HasColumnName("PlayListID");

                    b.Property<DateTime?>("VideoAddedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.Property<int>("VideoPosition")
                        .HasColumnType("int");

                    b.HasKey("PlayListItemId")
                        .HasName("PK__PlayList__5B7B5B943F02F781");

                    b.HasIndex("PlayListId");

                    b.HasIndex("VideoId");

                    b.ToTable("PlayListItem", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.PointHistory", b =>
                {
                    b.Property<int>("PointHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("PointHistoryID")
                        .HasComment("積分歷史編號");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("積分事件(發文,交易,邀請好友)");

                    b.Property<DateTime>("CreTime")
                        .HasColumnType("datetime")
                        .HasComment("事件時間");

                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasComment("積分");

                    b.Property<int?>("RefNo")
                        .HasColumnType("int")
                        .HasComment("參照事件編號(發文,交易,邀請好友)");

                    b.HasKey("PointHistoryId");

                    b.HasIndex("MemberId");

                    b.ToTable("PointHistory", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("ArticleID");

                    b.Property<bool?>("Lock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PostDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PosterId")
                        .HasColumnType("int")
                        .HasColumnName("PosterID");

                    b.HasKey("PostId")
                        .HasName("PK__Post__AA126038B6A21AA1");

                    b.HasIndex("PosterId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.ProductList", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ProductPrice")
                        .HasColumnType("money");

                    b.HasKey("ProductId");

                    b.ToTable("ProductList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.ReservationDetail", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("ReservationId");

                    b.HasIndex("MemberId");

                    b.ToTable("ReservationDetail", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.SeasonList", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeasonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonId"));

                    b.Property<int?>("EpisodeCount")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("SeasonName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnName("SeriesID");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeasonId");

                    b.HasIndex("SeriesId");

                    b.ToTable("SeasonList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int?>("HallsId")
                        .HasColumnType("int")
                        .HasColumnName("HallsID");

                    b.Property<string>("RowNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<string>("SeatStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SeatId");

                    b.HasIndex("HallsId");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.SeriesList", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeriesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesId"));

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SeriesId")
                        .HasName("PK_系列總表");

                    b.ToTable("SeriesList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShoppingCartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartId"));

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("ViedoPlanId")
                        .HasColumnType("int")
                        .HasColumnName("ViedoPlanID");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ViedoPlanId");

                    b.ToTable("ShoppingCart", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.ShowingHall", b =>
                {
                    b.Property<int>("ShowingHallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShowingHallID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowingHallId"));

                    b.Property<int>("CombinationId")
                        .HasColumnType("int")
                        .HasColumnName("CombinationID");

                    b.Property<int>("HallsId")
                        .HasColumnType("int")
                        .HasColumnName("HallsID");

                    b.HasKey("ShowingHallId");

                    b.HasIndex("CombinationId");

                    b.HasIndex("HallsId");

                    b.ToTable("ShowingHall", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Showtime", b =>
                {
                    b.Property<int>("ShowtimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShowtimeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowtimeId"));

                    b.Property<int?>("HallsId")
                        .HasColumnType("int")
                        .HasColumnName("HallsID");

                    b.Property<DateTime?>("ShowTimeDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("ShowTimeDATETIME");

                    b.Property<int?>("ViedoId")
                        .HasColumnType("int")
                        .HasColumnName("ViedoID");

                    b.HasKey("ShowtimeId");

                    b.HasIndex("HallsId");

                    b.HasIndex("ViedoId");

                    b.ToTable("Showtime", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.StreamingPlatformList", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlatformID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatformId"));

                    b.Property<string>("PlatformName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlatformId");

                    b.ToTable("StreamingPlatformList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.TheaterList", b =>
                {
                    b.Property<int>("TheaterId")
                        .HasColumnType("int")
                        .HasColumnName("TheaterID");

                    b.Property<string>("TheaterName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TheaterId");

                    b.ToTable("TheaterList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ThemeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeId"));

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ThemeId")
                        .HasName("PK__MovieDis__F9646BD21F408451");

                    b.ToTable("Theme", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("SeatID");

                    b.Property<int?>("ShowtimeId")
                        .HasColumnType("int")
                        .HasColumnName("ShowtimeID");

                    b.Property<int?>("TypeOfTicket")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowtimeId");

                    b.HasIndex("TypeOfTicket");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.TypeList", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("TypeList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.TypeOfTicket", b =>
                {
                    b.Property<int>("TypeOfTicket1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeOfTicket");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeOfTicket1"));

                    b.Property<string>("TypeOfTicketName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeOfTicket1");

                    b.ToTable("TypeOfTicket", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.ValidCode", b =>
                {
                    b.Property<int>("ValidCodeId")
                        .HasColumnType("int")
                        .HasColumnName("ValidCodeID")
                        .HasComment("流水號");

                    b.Property<DateTime>("CreTime")
                        .HasColumnType("datetime")
                        .HasComment("建立時間");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime")
                        .HasComment("到期時間");

                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("狀態");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("驗證類型(忘記密碼,註冊驗證)");

                    b.Property<string>("ValidCode1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ValidCode")
                        .HasComment("驗證碼");

                    b.HasKey("ValidCodeId");

                    b.HasIndex("MemberId");

                    b.ToTable("ValidCode", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.VideoList", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoId"));

                    b.Property<string>("AgeRating")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Episode")
                        .HasColumnType("int");

                    b.Property<bool>("IsShowing")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MainGenreId")
                        .HasColumnType("int")
                        .HasColumnName("MainGenreID");

                    b.Property<decimal?>("Popularity")
                        .HasColumnType("decimal(2, 1)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(2, 1)");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("RunningTime")
                        .HasColumnType("time");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int")
                        .HasColumnName("SeasonID");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnName("SeriesID");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ThumbnailId")
                        .HasColumnType("int")
                        .HasColumnName("ThumbnailID");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TrailerURL");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Views")
                        .HasColumnType("int");

                    b.HasKey("VideoId")
                        .HasName("PK_作品總表");

                    b.HasIndex("MainGenreId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TypeId");

                    b.ToTable("VideoList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.VideoStreamingLinkList", b =>
                {
                    b.Property<int>("StreamingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StreamingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreamingId"));

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("PlatformID");

                    b.Property<string>("StreamLink")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.HasKey("StreamingId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoStreamingLinkList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.ViedoPlanList", b =>
                {
                    b.Property<int>("ViedoPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ViedoPlanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViedoPlanId"));

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<int>("ViedoId")
                        .HasColumnType("int")
                        .HasColumnName("ViedoID");

                    b.HasKey("ViedoPlanId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ViedoId");

                    b.ToTable("ViedoPlanList", (string)null);
                });

            modelBuilder.Entity("VdbAPI.Models.Article", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Article_MemberInfo");

                    b.HasOne("VdbAPI.Models.Theme", "Theme")
                        .WithMany("Articles")
                        .HasForeignKey("ThemeId")
                        .IsRequired()
                        .HasConstraintName("FK_Article_Theme");

                    b.Navigation("Author");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("VdbAPI.Models.BlackList", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "BlockedMember")
                        .WithMany("BlackListBlockedMembers")
                        .HasForeignKey("BlockedMemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Blacklist_MemberInfo1");

                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("BlackListMembers")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Blacklist_MemberInfo");

                    b.Navigation("BlockedMember");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("VdbAPI.Models.CastList", b =>
                {
                    b.HasOne("VdbAPI.Models.ActorList", "Actor")
                        .WithMany("CastLists")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("FK_StaringList_ActorList");

                    b.HasOne("VdbAPI.Models.VideoList", "Video")
                        .WithMany("CastLists")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_StaringList_VideoList");

                    b.Navigation("Actor");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VdbAPI.Models.DirectorForVideoList", b =>
                {
                    b.HasOne("VdbAPI.Models.DirectorList", "Director")
                        .WithMany("DirectorForVideoLists")
                        .HasForeignKey("DirectorId")
                        .IsRequired()
                        .HasConstraintName("FK_DirectorForVideoList_DirectorList");

                    b.HasOne("VdbAPI.Models.VideoList", "Video")
                        .WithMany("DirectorForVideoLists")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DirectorForVideoList_VideoList");

                    b.Navigation("Director");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VdbAPI.Models.FriendChat", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Receiver")
                        .WithMany("FriendChatReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_FriendChat_MemberInfo1");

                    b.HasOne("VdbAPI.Models.MemberInfo", "Sender")
                        .WithMany("FriendChatSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_FriendChat_MemberInfo");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("VdbAPI.Models.FriendList", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Friend")
                        .WithMany("FriendListFriends")
                        .HasForeignKey("FriendId")
                        .IsRequired()
                        .HasConstraintName("FK_FriendList_MemberInfo1");

                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("FriendListMembers")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_FriendList_MemberInfo");

                    b.Navigation("Friend");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("VdbAPI.Models.GenresForVideoList", b =>
                {
                    b.HasOne("VdbAPI.Models.GenreList", "Genre")
                        .WithMany("GenresForVideoLists")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_GenresForVideoList_GenreList");

                    b.HasOne("VdbAPI.Models.VideoList", "Video")
                        .WithMany("GenresForVideoLists")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_GenresForVideoList_VideoList");

                    b.Navigation("Genre");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VdbAPI.Models.GiftList", b =>
                {
                    b.HasOne("VdbAPI.Models.GiftInfo", "Gift")
                        .WithMany("GiftLists")
                        .HasForeignKey("GiftId")
                        .IsRequired()
                        .HasConstraintName("FK_GiftList_GiftInfo");

                    b.Navigation("Gift");
                });

            modelBuilder.Entity("VdbAPI.Models.Hall", b =>
                {
                    b.HasOne("VdbAPI.Models.Cinema", "Cinema")
                        .WithMany("Halls")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Hall_Cinema");

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("VdbAPI.Models.ImageForVideoList", b =>
                {
                    b.HasOne("VdbAPI.Models.ImageList", "Image")
                        .WithMany("ImageForVideoLists")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ImageForVideoList_ImageList");

                    b.HasOne("VdbAPI.Models.VideoList", "Video")
                        .WithMany("ImageForVideoLists")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ImageForVideoList_VideoList");

                    b.Navigation("Image");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VdbAPI.Models.Invite", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "InvitedMember")
                        .WithMany("InviteInvitedMembers")
                        .HasForeignKey("InvitedMemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Invite_MemberInfo1");

                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("InviteMembers")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Invite_MemberInfo");

                    b.Navigation("InvitedMember");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("VdbAPI.Models.KeywordForVideoList", b =>
                {
                    b.HasOne("VdbAPI.Models.KeywordList", "Keyword")
                        .WithMany("KeywordForVideoLists")
                        .HasForeignKey("KeywordId")
                        .HasConstraintName("FK_KeywordFroVideoList_KeywordList");

                    b.HasOne("VdbAPI.Models.VideoList", "Video")
                        .WithMany("KeywordForVideoLists")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_KeywordFroVideoList_VideoList");

                    b.Navigation("Keyword");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VdbAPI.Models.MemberCoupon", b =>
                {
                    b.HasOne("VdbAPI.Models.CouponInfo", "Coupon")
                        .WithMany("MemberCoupons")
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberCoupon_CouponInfo");

                    b.HasOne("VdbAPI.Models.GiftInfo", "Gift")
                        .WithMany("MemberCoupons")
                        .HasForeignKey("GiftId")
                        .HasConstraintName("FK_MemberCoupon_GiftInfo");

                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("MemberCoupons")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberCoupon_MemberInfo");

                    b.Navigation("Coupon");

                    b.Navigation("Gift");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("VdbAPI.Models.MemberCreatedPlayList", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("MemberCreatedPlayLists")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberCreatedPlayList_MemberInfo");

                    b.HasOne("VdbAPI.Models.PlayList", "PlayList")
                        .WithMany("MemberCreatedPlayLists")
                        .HasForeignKey("PlayListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MemberCreatedPlayList_PlayList");

                    b.Navigation("Member");

                    b.Navigation("PlayList");
                });

            modelBuilder.Entity("VdbAPI.Models.MemberNotice", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("MemberNotices")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberNotice_MemberInfo");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("VdbAPI.Models.MemberPlayList", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("MemberPlayLists")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberPlayList_MemberInfo");

                    b.HasOne("VdbAPI.Models.PlayList", "PlayList")
                        .WithMany("MemberPlayLists")
                        .HasForeignKey("PlayListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MemberPlayList_PlayList");

                    b.Navigation("Member");

                    b.Navigation("PlayList");
                });

            modelBuilder.Entity("VdbAPI.Models.NowShowingTheater", b =>
                {
                    b.HasOne("VdbAPI.Models.Cinema", "Cinema")
                        .WithMany("NowShowingTheaters")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_NowShowingTheater_Cinema");

                    b.HasOne("VdbAPI.Models.VideoList", "Video")
                        .WithMany("NowShowingTheaters")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_NowShowingTheater_VideoList");

                    b.Navigation("Cinema");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VdbAPI.Models.Order", b =>
                {
                    b.HasOne("VdbAPI.Models.CouponInfo", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_Order_CouponInfo");

                    b.HasOne("VdbAPI.Models.MemberInfo", "Driver")
                        .WithMany("Orders")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Order_MemberInfo");

                    b.HasOne("VdbAPI.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Orders")
                        .HasForeignKey("ShoppingCartId")
                        .HasConstraintName("FK_Order_ShoppingCart");

                    b.Navigation("Coupon");

                    b.Navigation("Driver");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("VdbAPI.Models.OrderDetail", b =>
                {
                    b.HasOne("VdbAPI.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("VdbAPI.Models.ProductList", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetail_ProductList");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VdbAPI.Models.PlayListCollaborator", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("PlayListCollaborators")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_PlayListCollaborator_MemberInfo");

                    b.HasOne("VdbAPI.Models.PlayList", "PlayList")
                        .WithMany("PlayListCollaborators")
                        .HasForeignKey("PlayListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlayListCollaborator_PlayList");

                    b.Navigation("Member");

                    b.Navigation("PlayList");
                });

            modelBuilder.Entity("VdbAPI.Models.PlayListItem", b =>
                {
                    b.HasOne("VdbAPI.Models.PlayList", "PlayList")
                        .WithMany("PlayListItems")
                        .HasForeignKey("PlayListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlayListItem_PlayList");

                    b.HasOne("VdbAPI.Models.VideoList", "Video")
                        .WithMany("PlayListItems")
                        .HasForeignKey("VideoId")
                        .IsRequired()
                        .HasConstraintName("FK_PlayListItem_VideoList1");

                    b.Navigation("PlayList");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VdbAPI.Models.PointHistory", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("PointHistories")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_PointHistory_MemberInfo");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("VdbAPI.Models.Post", b =>
                {
                    b.HasOne("VdbAPI.Models.Article", "PostNavigation")
                        .WithOne("Post")
                        .HasForeignKey("VdbAPI.Models.Post", "PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_Article");

                    b.HasOne("VdbAPI.Models.MemberInfo", "Poster")
                        .WithMany("Posts")
                        .HasForeignKey("PosterId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_MemberInfo");

                    b.Navigation("PostNavigation");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("VdbAPI.Models.ReservationDetail", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("ReservationDetails")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationDetail_MemberInfo");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("VdbAPI.Models.SeasonList", b =>
                {
                    b.HasOne("VdbAPI.Models.SeriesList", "Series")
                        .WithMany("SeasonLists")
                        .HasForeignKey("SeriesId")
                        .HasConstraintName("FK_SeasonList_SeriesList");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("VdbAPI.Models.Seat", b =>
                {
                    b.HasOne("VdbAPI.Models.Hall", "Halls")
                        .WithMany("Seats")
                        .HasForeignKey("HallsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Seat_Hall");

                    b.Navigation("Halls");
                });

            modelBuilder.Entity("VdbAPI.Models.ShoppingCart", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCart_MemberInfo");

                    b.HasOne("VdbAPI.Models.ViedoPlanList", "ViedoPlan")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("ViedoPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCart_ViedoPlanList");

                    b.Navigation("Member");

                    b.Navigation("ViedoPlan");
                });

            modelBuilder.Entity("VdbAPI.Models.ShowingHall", b =>
                {
                    b.HasOne("VdbAPI.Models.NowShowingTheater", "Combination")
                        .WithMany("ShowingHalls")
                        .HasForeignKey("CombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShowingHall_NowShowingTheater");

                    b.HasOne("VdbAPI.Models.Hall", "Halls")
                        .WithMany("ShowingHalls")
                        .HasForeignKey("HallsId")
                        .IsRequired()
                        .HasConstraintName("FK_ShowingHall_Hall");

                    b.Navigation("Combination");

                    b.Navigation("Halls");
                });

            modelBuilder.Entity("VdbAPI.Models.Showtime", b =>
                {
                    b.HasOne("VdbAPI.Models.Hall", "Halls")
                        .WithMany("Showtimes")
                        .HasForeignKey("HallsId")
                        .HasConstraintName("FK_Showtime_Hall");

                    b.HasOne("VdbAPI.Models.ShowingHall", "HallsNavigation")
                        .WithMany("Showtimes")
                        .HasForeignKey("HallsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Showtime_ShowingHall");

                    b.HasOne("VdbAPI.Models.VideoList", "Viedo")
                        .WithMany("Showtimes")
                        .HasForeignKey("ViedoId")
                        .HasConstraintName("FK_Showtime_VideoList");

                    b.Navigation("Halls");

                    b.Navigation("HallsNavigation");

                    b.Navigation("Viedo");
                });

            modelBuilder.Entity("VdbAPI.Models.Ticket", b =>
                {
                    b.HasOne("VdbAPI.Models.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Ticket_Seat1");

                    b.HasOne("VdbAPI.Models.Showtime", "Showtime")
                        .WithMany("Tickets")
                        .HasForeignKey("ShowtimeId")
                        .HasConstraintName("FK_Ticket_Showtime");

                    b.HasOne("VdbAPI.Models.TypeOfTicket", "TypeOfTicketNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("TypeOfTicket")
                        .HasConstraintName("FK_Ticket_TypeOfTicket");

                    b.Navigation("Seat");

                    b.Navigation("Showtime");

                    b.Navigation("TypeOfTicketNavigation");
                });

            modelBuilder.Entity("VdbAPI.Models.ValidCode", b =>
                {
                    b.HasOne("VdbAPI.Models.MemberInfo", "Member")
                        .WithMany("ValidCodes")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidCode_MemberInfo");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("VdbAPI.Models.VideoList", b =>
                {
                    b.HasOne("VdbAPI.Models.GenreList", "MainGenre")
                        .WithMany("VideoLists")
                        .HasForeignKey("MainGenreId")
                        .IsRequired()
                        .HasConstraintName("FK_VideoList_GenreList");

                    b.HasOne("VdbAPI.Models.SeasonList", "Season")
                        .WithMany("VideoLists")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_VideoList_SeasonList");

                    b.HasOne("VdbAPI.Models.SeriesList", "Series")
                        .WithMany("VideoLists")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_VideoList_SeriesList");

                    b.HasOne("VdbAPI.Models.TypeList", "Type")
                        .WithMany("VideoLists")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_VideoList_TypeList");

                    b.Navigation("MainGenre");

                    b.Navigation("Season");

                    b.Navigation("Series");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("VdbAPI.Models.VideoStreamingLinkList", b =>
                {
                    b.HasOne("VdbAPI.Models.StreamingPlatformList", "Platform")
                        .WithMany("VideoStreamingLinkLists")
                        .HasForeignKey("PlatformId")
                        .IsRequired()
                        .HasConstraintName("FK_VideoStreamingLinkList_StreamingPlatformList");

                    b.HasOne("VdbAPI.Models.VideoList", "Video")
                        .WithMany("VideoStreamingLinkLists")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_VideoStreamingLinkList_VideoList");

                    b.Navigation("Platform");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VdbAPI.Models.ViedoPlanList", b =>
                {
                    b.HasOne("VdbAPI.Models.PlanList", "Plan")
                        .WithMany("ViedoPlanLists")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ViedoPlanList_PlanList");

                    b.HasOne("VdbAPI.Models.VideoList", "Viedo")
                        .WithMany("ViedoPlanLists")
                        .HasForeignKey("ViedoId")
                        .IsRequired()
                        .HasConstraintName("FK_ViedoPlanList_VideoList");

                    b.Navigation("Plan");

                    b.Navigation("Viedo");
                });

            modelBuilder.Entity("VdbAPI.Models.ActorList", b =>
                {
                    b.Navigation("CastLists");
                });

            modelBuilder.Entity("VdbAPI.Models.Article", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("VdbAPI.Models.Cinema", b =>
                {
                    b.Navigation("Halls");

                    b.Navigation("NowShowingTheaters");
                });

            modelBuilder.Entity("VdbAPI.Models.CouponInfo", b =>
                {
                    b.Navigation("MemberCoupons");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VdbAPI.Models.DirectorList", b =>
                {
                    b.Navigation("DirectorForVideoLists");
                });

            modelBuilder.Entity("VdbAPI.Models.GenreList", b =>
                {
                    b.Navigation("GenresForVideoLists");

                    b.Navigation("VideoLists");
                });

            modelBuilder.Entity("VdbAPI.Models.GiftInfo", b =>
                {
                    b.Navigation("GiftLists");

                    b.Navigation("MemberCoupons");
                });

            modelBuilder.Entity("VdbAPI.Models.Hall", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("ShowingHalls");

                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("VdbAPI.Models.ImageList", b =>
                {
                    b.Navigation("ImageForVideoLists");
                });

            modelBuilder.Entity("VdbAPI.Models.KeywordList", b =>
                {
                    b.Navigation("KeywordForVideoLists");
                });

            modelBuilder.Entity("VdbAPI.Models.MemberInfo", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("BlackListBlockedMembers");

                    b.Navigation("BlackListMembers");

                    b.Navigation("FriendChatReceivers");

                    b.Navigation("FriendChatSenders");

                    b.Navigation("FriendListFriends");

                    b.Navigation("FriendListMembers");

                    b.Navigation("InviteInvitedMembers");

                    b.Navigation("InviteMembers");

                    b.Navigation("MemberCoupons");

                    b.Navigation("MemberCreatedPlayLists");

                    b.Navigation("MemberNotices");

                    b.Navigation("MemberPlayLists");

                    b.Navigation("Orders");

                    b.Navigation("PlayListCollaborators");

                    b.Navigation("PointHistories");

                    b.Navigation("Posts");

                    b.Navigation("ReservationDetails");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("ValidCodes");
                });

            modelBuilder.Entity("VdbAPI.Models.NowShowingTheater", b =>
                {
                    b.Navigation("ShowingHalls");
                });

            modelBuilder.Entity("VdbAPI.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("VdbAPI.Models.PlanList", b =>
                {
                    b.Navigation("ViedoPlanLists");
                });

            modelBuilder.Entity("VdbAPI.Models.PlayList", b =>
                {
                    b.Navigation("MemberCreatedPlayLists");

                    b.Navigation("MemberPlayLists");

                    b.Navigation("PlayListCollaborators");

                    b.Navigation("PlayListItems");
                });

            modelBuilder.Entity("VdbAPI.Models.ProductList", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("VdbAPI.Models.SeasonList", b =>
                {
                    b.Navigation("VideoLists");
                });

            modelBuilder.Entity("VdbAPI.Models.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("VdbAPI.Models.SeriesList", b =>
                {
                    b.Navigation("SeasonLists");

                    b.Navigation("VideoLists");
                });

            modelBuilder.Entity("VdbAPI.Models.ShoppingCart", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VdbAPI.Models.ShowingHall", b =>
                {
                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("VdbAPI.Models.Showtime", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("VdbAPI.Models.StreamingPlatformList", b =>
                {
                    b.Navigation("VideoStreamingLinkLists");
                });

            modelBuilder.Entity("VdbAPI.Models.Theme", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("VdbAPI.Models.TypeList", b =>
                {
                    b.Navigation("VideoLists");
                });

            modelBuilder.Entity("VdbAPI.Models.TypeOfTicket", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("VdbAPI.Models.VideoList", b =>
                {
                    b.Navigation("CastLists");

                    b.Navigation("DirectorForVideoLists");

                    b.Navigation("GenresForVideoLists");

                    b.Navigation("ImageForVideoLists");

                    b.Navigation("KeywordForVideoLists");

                    b.Navigation("NowShowingTheaters");

                    b.Navigation("PlayListItems");

                    b.Navigation("Showtimes");

                    b.Navigation("VideoStreamingLinkLists");

                    b.Navigation("ViedoPlanLists");
                });

            modelBuilder.Entity("VdbAPI.Models.ViedoPlanList", b =>
                {
                    b.Navigation("ShoppingCarts");
                });
#pragma warning restore 612, 618
        }
    }
}
